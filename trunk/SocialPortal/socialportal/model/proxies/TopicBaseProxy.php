<?php

namespace socialportal\model\proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class TopicBaseProxy extends \socialportal\model\TopicBase implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setCustomType($customType)
    {
        $this->_load();
        return parent::setCustomType($customType);
    }

    public function getCustomType()
    {
        $this->_load();
        return parent::getCustomType();
    }

    public function setTitle($title)
    {
        $this->_load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->_load();
        return parent::getTitle();
    }

    public function setStartTime($startTime)
    {
        $this->_load();
        return parent::setStartTime($startTime);
    }

    public function getStartTime()
    {
        $this->_load();
        return parent::getStartTime();
    }

    public function setTime($time)
    {
        $this->_load();
        return parent::setTime($time);
    }

    public function getTime()
    {
        $this->_load();
        return parent::getTime();
    }

    public function setIsDeleted($isDeleted)
    {
        $this->_load();
        return parent::setIsDeleted($isDeleted);
    }

    public function getIsDeleted()
    {
        $this->_load();
        return parent::getIsDeleted();
    }

    public function setIsOpen($isOpen)
    {
        $this->_load();
        return parent::setIsOpen($isOpen);
    }

    public function getIsOpen()
    {
        $this->_load();
        return parent::getIsOpen();
    }

    public function setIsSticky($isSticky)
    {
        $this->_load();
        return parent::setIsSticky($isSticky);
    }

    public function getIsSticky()
    {
        $this->_load();
        return parent::getIsSticky();
    }

    public function setNumPosts($numPosts)
    {
        $this->_load();
        return parent::setNumPosts($numPosts);
    }

    public function getNumPosts()
    {
        $this->_load();
        return parent::getNumPosts();
    }

    public function setTagCount($tagCount)
    {
        $this->_load();
        return parent::setTagCount($tagCount);
    }

    public function getTagCount()
    {
        $this->_load();
        return parent::getTagCount();
    }

    public function setPoster(\socialportal\model\User $poster)
    {
        $this->_load();
        return parent::setPoster($poster);
    }

    public function getPoster()
    {
        $this->_load();
        return parent::getPoster();
    }

    public function setForum(\socialportal\model\Forum $forum)
    {
        $this->_load();
        return parent::setForum($forum);
    }

    public function getForum()
    {
        $this->_load();
        return parent::getForum();
    }

    public function setLastposter(\socialportal\model\User $lastposter)
    {
        $this->_load();
        return parent::setLastposter($lastposter);
    }

    public function getLastposter()
    {
        $this->_load();
        return parent::getLastposter();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'customType', 'title', 'startTime', 'time', 'isDeleted', 'isOpen', 'isSticky', 'numPosts', 'tagCount', 'poster', 'forum', 'lastposter');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}